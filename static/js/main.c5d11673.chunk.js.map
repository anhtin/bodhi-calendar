{"version":3,"sources":["components/Flex.tsx","utils/theme.ts","components/Calendar/CalendarBody/DayGrid/DayTile/DayTileView.tsx","components/Calendar/CalendarBody/DayGrid/DayTile/index.ts","components/Calendar/CalendarBody/DayGrid/index.ts","components/Calendar/CalendarBody/DayGrid/DayGridView.tsx","components/Calendar/CalendarBody/CalendarBodyView.tsx","components/Calendar/CalendarBody/index.ts","components/Calendar/CalendarHeader/index.ts","components/Calendar/CalendarHeader/CalendarHeaderView.tsx","components/Calendar/CalendarConfiguration/CalendarConfigurationButton.tsx","utils/vegetarian.ts","utils/helpers.ts","utils/store.ts","components/Calendar/CalendarConfiguration/CalendarConfigurationView.tsx","components/Calendar/CalendarView.tsx","components/Calendar/index.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Flex","_ref","direction","flex","justifyContent","alignItems","children","style","react_default","a","createElement","Object","objectSpread","display","flexDirection","colors","BROWN","GREEN","GRAY_LIGHT","YELLOW_LIGHT","SolarPart","_ref2","transform","LunarPart","_ref3","fontSize","Tile","_ref4","isToday","isVegetarianDay","isMonth","width","height","notMonthStyle","todayStyle","vegetarianStyle","components_Flex","fontWeight","color","borderRadius","backgroundColor","opacity","DayTile","date","pred","today","discrete","cDate","solarLunar","solar2lunar","year","month","day","DayTileView_Tile","hasSame","DayTileView_LunarPart","lDay","DayTileView_SolarPart","DayGrid","currentDate","displayDate","grid","startOf","weeks","week","days","push","plus","computeDateGrid","map","row","i","key","col","j","WeekdayRow","borderBottom","Info","weekdaysFormat","textAlign","CalendarBody","props","CalendarBodyView_WeekdayRow","CalendarHeader","onPrevMonth","onNextMonth","monthLong","bloomer_min","onClick","CalendarConfigurationButton","assign","position","bottom","alignSelf","userSelect","cursor","checkMonthlySchedule","days30","days29","monthDays","lYear","lMonth","includes","defaultVegetarianSchedules","name","findScheduleByName","getVegetarianSchedules","find","schedule","getVegetarianSchedule","localStorage","scheduleName","getItem","defaultVegetarianSchedule","setItem","CalendarConfigurationView","config","visible","onHide","onUpdate","isActive","ModalCard","ModalCardHeader","ModalCardTitle","Delete","ModalCardBody","Field","Label","Control","onChange","e","currentConfig","setVegetarianSchedule","newConfigFromSchedule","target","value","selected","Calendar","_React$Component","CalendarView","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","state","minus","months","onToggleConfigurationModal","showConfig","onHideConfigurationModal","onUpdateConfiguration","DateTime","local","inherits","createClass","_this$state","CalendarConfigurationView_CalendarConfigurationView","CalendarConfigurationButton_CalendarConfigurationButton","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5d11673.chunk.js","sourcesContent":["import React, { ReactElement, CSSProperties } from 'react';\n\nexport interface FlexProps {\n  direction?: 'row' | 'column';\n  flex?: number,\n  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-around' | 'space-between';\n  alignItems?: 'flex-start' | 'flex-end' | 'center' | 'space-around' | 'space-between';\n  children: ReactElement | ReactElement[];\n  style?: CSSProperties;\n}\n\nconst Flex = ({\n  direction,\n  flex,\n  justifyContent,\n  alignItems,\n  children,\n  style,\n}: FlexProps) => (\n  <div style={{\n    display: 'flex',\n    flexDirection: direction,\n    flex,\n    justifyContent,\n    alignItems,\n    ...style\n  }}>\n    {children}\n  </div>\n)\n\nexport default Flex;","export const colors = {\n  BROWN: '#8f6e64',\n  GREEN: '#a1b182',\n  GRAY_LIGHT: '#f6f6ff',\n  YELLOW_LIGHT: '#fff9ed',\n};\n\nexport default {\n  breakpoints: ['40em', '52em', '64em'],\n  buttons: {\n    primary: {\n      color: '#fff',\n      backgroundColor: colors.BROWN,\n    },\n    outline: {\n      color: colors.BROWN,\n      backgroundColor: 'transparent',\n      boxShadow: 'inset 0 0 0 2px'\n    },\n  },\n  colors,\n  fontSizes: [\n    12, 14, 16, 20, 24, 32, 48, 64\n  ],\n  fonts: {\n    sans: 'system-ui, sans-serif',\n    mono: 'Menlo, monospace',\n  },\n  shadows: {\n    small: '0 0 4px rgba(0, 0, 0, .125)',\n    large: '0 0 24px rgba(0, 0, 0, .125)'\n  },\n  space: [\n    0, 4, 8, 16, 32, 64, 128, 256\n  ]\n}","import React, { CSSProperties, ReactElement } from 'react';\nimport { DateTime } from 'luxon';\nimport solarLunar from 'solarlunar';\n\nimport Flex from 'components/Flex';\nimport { VegetarianDayPredicate } from 'utils/types';\nimport { colors } from 'utils/theme';\n\ninterface DayTileViewProps {\n  today: DateTime;\n  date: DateTime;\n  pred: VegetarianDayPredicate;\n  discrete: boolean;\n};\n\nexport const DayTileView = ({\n  date,\n  pred,\n  today,\n  discrete\n}: DayTileViewProps) => {\n  const cDate = solarLunar.solar2lunar(date.year, date.month, date.day);\n  return (\n    <Tile\n      isMonth={!discrete}\n      isToday={date.hasSame(today, 'day')}\n      isVegetarianDay={pred(cDate)}\n    >\n      <LunarPart>{cDate.lDay}</LunarPart>\n      <SolarPart isToday={date.hasSame(today, 'day')}>{date.day}</SolarPart>\n    </Tile>\n  );\n};\n\ninterface SolarPartProps {\n  isToday: boolean;\n  children: any;\n}\nconst SolarPart = ({ children }: SolarPartProps) => (\n  <div style={{\n    transform: 'translate(0, -0.2em)'\n  }}>\n    {children}\n  </div>\n);\n\ninterface LunarPartProps {\n  children: number;\n}\nconst LunarPart = ({ children }: LunarPartProps) => (\n  <small style={{\n    fontSize: '0.5em',\n    transform: 'translate(0, 0.5em)'\n  }}>\n    {children}\n  </small>\n);\n\ninterface TileProps {\n  isToday: boolean;\n  isVegetarianDay: boolean;\n  isMonth: boolean;\n  children: ReactElement | ReactElement[];\n}\nconst Tile = ({ isToday, isVegetarianDay, isMonth, children }: TileProps) => {\n  const style = {\n    width: '2em',\n    height: '2em',\n    ...(isMonth ? null : notMonthStyle),\n    ...(isToday ? todayStyle : null),\n    ...(isVegetarianDay ? vegetarianStyle : null),\n  };\n  return (\n    <Flex\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      style={style}\n    >\n      {children}\n    </Flex>\n  );\n}\n\nconst vegetarianStyle: CSSProperties = {\n  fontWeight: 'bold',\n  color: colors.GREEN,\n};\nconst todayStyle: CSSProperties = {\n  fontWeight: 'bold',\n  borderRadius: '500%',\n  backgroundColor: colors.BROWN,\n};\nconst notMonthStyle: CSSProperties = {\n  opacity: 0.5,\n};","import { DayTileView as DayTile } from './DayTileView';\n\nexport default DayTile","import { DayGridView as DayGrid } from './DayGridView';\n\nexport default DayGrid;","import React from 'react';\nimport { DateTime } from 'luxon';\n\nimport DayTile from './DayTile';\nimport Flex from 'components/Flex';\nimport { VegetarianDayPredicate } from 'utils/types';\n\ninterface DayGridViewProps {\n  currentDate: DateTime;\n  displayDate: DateTime;\n  pred: VegetarianDayPredicate;\n}\n\nexport const DayGridView = ({\n    currentDate,\n    displayDate,\n    pred,\n}: DayGridViewProps) => {\n  const grid = computeDateGrid(displayDate);\n  return (\n    <div>\n      {grid.map((row, i) => (\n        <Flex key={i} justifyContent=\"space-around\">\n          {row.map((col, j) => (\n            <Flex key={i} flex={1} justifyContent=\"space-around\">\n              <DayTile\n                date={col}\n                pred={pred}\n                today={currentDate}\n                discrete={!col.hasSame(displayDate, 'month')}\n              />\n            </Flex>\n          ))}\n        </Flex>\n      ))}\n    </div>\n  );\n}\n\nfunction computeDateGrid(date: DateTime): DateTime[][] {\n  date = date.startOf('week');\n  const weeks = [];\n  for (let week = 0; week < 5; week++) {\n    const days = [];\n    for (let day = 0; day < 7; day++) {\n      days.push(date);\n      date = date.plus({ days: 1 });\n    }\n    weeks.push(days);\n  }\n  return weeks;\n}","import React from 'react';\nimport { DateTime, Info } from 'luxon';\n\nimport DayGrid from './DayGrid';\nimport Flex from 'components/Flex';\nimport { VegetarianDayPredicate } from 'utils/types';\n\n\ninterface CalendarBodyViewProps {\n  currentDate: DateTime;\n  displayDate: DateTime;\n  pred: VegetarianDayPredicate;\n}\n\nexport const CalendarBodyView = (props: CalendarBodyViewProps) => (\n  <Flex direction=\"column\" justifyContent=\"space-between\">\n    <WeekdayRow />\n    <DayGrid {...props} />\n  </Flex>\n);\n\nconst WeekdayRow = () => (\n  <Flex justifyContent=\"space-around\" style={{ borderBottom: '1px solid black' }}>\n    {Info.weekdaysFormat('short').map((day, i) => (\n      <h3 key={i} style={{ flex: 1, textAlign: 'center' }}>{day}</h3>\n    ))}\n  </Flex>\n);\n","import { CalendarBodyView as CalendarBody } from './CalendarBodyView';\n\nexport default CalendarBody;","import { CalendarHeaderView as CalendarHeader } from './CalendarHeaderView';\n\nexport default CalendarHeader;","import React from 'react';\nimport { DateTime } from 'luxon';\nimport { Button, Title, Subtitle } from 'bloomer';\n\nimport Flex from 'components/Flex';\n\ninterface CalendarHeaderViewProps {\n  displayDate: DateTime;\n  onPrevMonth: () => void;\n  onNextMonth: () => void;\n}\n\nexport const CalendarHeaderView = ({\n  displayDate,\n  onPrevMonth,\n  onNextMonth\n}: CalendarHeaderViewProps) => {\n  const month = displayDate.monthLong;\n  const year = displayDate.year;\n  return (\n    <Flex>\n        <Button onClick={onPrevMonth}>&lt;</Button>\n        <Flex direction=\"column\" flex={1} alignItems=\"center\">\n          <h2>{year}</h2>\n          <h1 style={{ fontSize: '1.5em', fontWeight: 'bold' }}>{month}</h1>\n        </Flex>\n        <Button onClick={onNextMonth}>&gt;</Button>\n    </Flex>\n  );\n};\n","import React, { CSSProperties } from 'react';\n\nexport interface CalendarConfigurationButtonProps {\n  onClick: () => void;\n}\n\nexport const CalendarConfigurationButton = (\n  props: CalendarConfigurationButtonProps\n) => (\n  <div style={style} {...props}>⚙</div>\n);\n\nconst style: CSSProperties = {\n  fontSize: '4rem',\n  position: 'fixed',\n  bottom: '1vh',\n  alignSelf: 'flex-end',\n  justifyContent: 'center',\n  alignItems: 'center',\n  userSelect: 'none',\n  cursor: 'pointer',\n};","import solarLunar, { SolarLunarDate } from 'solarlunar';\nimport { VegetarianDayPredicate, VegetarianSchedule } from './types';\n\nfunction checkMonthlySchedule(\n  date: SolarLunarDate,\n  days30: number[],\n  days29: number[]\n): boolean {\n  if (solarLunar.monthDays(date.lYear, date.lMonth) === 29) {\n    return days29.includes(date.lDay);\n  }\n  return days30.includes(date.lDay);\n}\n\nexport const defaultVegetarianSchedules: VegetarianSchedule[] = [\n  {\n    name: \"10 days a month\",\n    pred: (date: SolarLunarDate): boolean => (\n      checkMonthlySchedule(\n        date,\n        [1, 8, 14, 15, 18, 23, 24, 28, 29, 30],\n        [1, 8, 14, 15, 18, 23, 24, 27, 28, 29]\n      )\n    )\n  },\n  {\n    name: \"8 days a month\",\n    pred: (date: SolarLunarDate): boolean => (\n      checkMonthlySchedule(\n        date,\n        [1, 8, 14, 15, 18, 23, 24, 30],\n        [1, 8, 14, 15, 18, 23, 24, 29]\n      )\n    ),\n  },\n  {\n    name: \"6 days a month\",\n    pred: (date: SolarLunarDate): boolean => (\n      checkMonthlySchedule(\n        date,\n        [8, 14, 15, 18, 23, 29, 30],\n        [8, 14, 15, 18, 23, 28, 29]\n      )\n    ),\n  },\n  {\n    name: \"4 days a month\",\n    pred: (date: SolarLunarDate): boolean => (\n      checkMonthlySchedule(\n        date,\n        [1, 14, 15, 30],\n        [1, 14, 15, 29]\n      )\n    ),\n  },\n  {\n    name: \"2 days a month\",\n    pred: (date: SolarLunarDate): boolean => (\n      checkMonthlySchedule(\n        date,\n        [1, 15],\n        [1, 15]\n      )\n    ),\n  },\n];","import { VegetarianSchedule } from 'utils/types';\nimport { getVegetarianSchedules } from 'utils/store';\n\nexport function findScheduleByName(\n  name: string\n): VegetarianSchedule | undefined {\n  return getVegetarianSchedules().find((schedule): boolean =>\n    schedule.name === name\n  );\n}","import { defaultVegetarianSchedules } from './vegetarian';\nimport { VegetarianSchedule } from 'utils/types';\nimport { findScheduleByName } from './helpers';\n\nexport function getVegetarianSchedule(): VegetarianSchedule {\n  if (localStorage) {\n    const scheduleName = localStorage.getItem('schedule');\n    if (scheduleName) {\n      const schedule = findScheduleByName(scheduleName);\n      if (schedule) return schedule;\n    }\n  }\n\n  const defaultVegetarianSchedule = defaultVegetarianSchedules[0];\n  localStorage.setItem('schedule', defaultVegetarianSchedule.name);\n  return defaultVegetarianSchedule;\n}\n\nexport function getVegetarianSchedules(): VegetarianSchedule[] {\n  return defaultVegetarianSchedules;\n}\n\nexport function setVegetarianSchedule(schedule: VegetarianSchedule): void {\n  if (localStorage) {\n    localStorage.setItem('schedule', schedule.name);\n  }\n}\n\nexport function initializeStore(): void {\n  if (localStorage) {\n    const currVersion = '0.0.1';\n    const prevVersion = localStorage.getItem('version');\n\n    if (prevVersion !== null && prevVersion < currVersion) {\n      // Migration code (future work)\n    }\n\n    localStorage.setItem('version', currVersion);\n  }\n}","import React from 'react';\nimport { Modal, ModalBackground, Select } from 'bloomer';\n\nimport { getVegetarianSchedules, setVegetarianSchedule } from 'utils/store';\nimport { ModalCard } from 'bloomer/lib/components/Modal/Card/ModalCard';\nimport { ModalCardHeader } from 'bloomer/lib/components/Modal/Card/ModalCardHeader';\nimport { ModalCardTitle } from 'bloomer/lib/components/Modal/Card/ModalCardTitle';\nimport { ModalCardBody } from 'bloomer/lib/components/Modal/Card/ModalCardBody';\nimport { Delete } from 'bloomer/lib/elements/Delete';\nimport { Field } from 'bloomer/lib/elements/Form/Field/Field';\nimport { Label } from 'bloomer/lib/elements/Form/Label';\nimport { Control } from 'bloomer/lib/elements/Form/Control';\nimport { Configuration, VegetarianSchedule } from 'utils/types';\nimport { findScheduleByName } from 'utils/helpers';\n\nexport interface CalendarConfigurationViewProps {\n  config: Configuration;\n  visible: boolean;\n  onHide: () => void;\n  onUpdate: (newConfig: Configuration) => void;\n}\n\nexport const CalendarConfigurationView = ({\n  config,\n  visible,\n  onHide,\n  onUpdate,\n}: CalendarConfigurationViewProps) => (\n  <Modal isActive={visible}>\n    <ModalBackground />\n    <ModalCard>\n      <ModalCardHeader>\n        <ModalCardTitle>Configuration</ModalCardTitle>\n        <Delete onClick={onHide} />\n      </ModalCardHeader>\n      <ModalCardBody>\n        <Field>\n          <Label>Schedule</Label>\n          <Control>\n            <Select onChange={(e: any) => (\n              onUpdate(newConfigFromSchedule(\n                config,\n                findScheduleByName(e.target.value)\n              ))\n            )}>\n              {getVegetarianSchedules().map(({ name }) => (\n                name === config.schedule.name\n                  ? <option selected={true}>{ name }</option>\n                  : <option>{ name }</option>\n              ))}\n            </Select>\n          </Control>\n        </Field>\n      </ModalCardBody>\n    </ModalCard>\n  </Modal>\n);\n\nfunction newConfigFromSchedule(\n  currentConfig: Configuration,\n  schedule?: VegetarianSchedule,\n): Configuration {\n  if (schedule) {\n    setVegetarianSchedule(schedule);\n    return {\n      ...currentConfig,\n      schedule: schedule,\n    };\n  }\n  return currentConfig;\n}","import React from 'react';\nimport { DateTime } from 'luxon';\n\nimport CalendarBody from './CalendarBody';\nimport CalendarHeader from './CalendarHeader';\nimport Flex from 'components/Flex';\nimport { CalendarConfigurationButton, CalendarConfigurationView } from './CalendarConfiguration';\nimport { Configuration } from 'utils/types';\nimport { initializeStore, getVegetarianSchedule } from 'utils/store';\n\ninterface CalenderViewState {\n  currentDate: DateTime;\n  displayDate: DateTime;\n  config: Configuration;\n  showConfig: boolean;\n}\n\nexport class CalendarView extends React.Component<any, CalenderViewState> {\n  constructor(props: any) {\n    super(props);\n    initializeStore();\n    const currentDate = DateTime.local();\n    this.state = {\n      showConfig: false,\n      config: {\n        schedule: getVegetarianSchedule(),\n      },\n      displayDate: currentDate.startOf('month'),\n      currentDate,\n    };\n  }\n\n  render() {\n    const { currentDate, displayDate, config, showConfig } = this.state;\n    return (\n      <Flex\n        direction=\"column\"\n        justifyContent=\"space-around\"\n        alignItems=\"space-around\"\n      >\n          <CalendarHeader\n            displayDate={this.state.displayDate}\n            onPrevMonth={this.onPrevMonth}\n            onNextMonth={this.onNextMonth}\n          />\n          <CalendarBody\n            currentDate={currentDate}\n            displayDate={displayDate}\n            pred={config.schedule.pred}\n          />\n        <CalendarConfigurationView\n          visible={showConfig}\n          onHide={this.onHideConfigurationModal}\n          config={config}\n          onUpdate={this.onUpdateConfiguration}\n        />\n        <CalendarConfigurationButton\n          onClick={this.onToggleConfigurationModal}\n        />\n      </Flex>\n    );\n  }\n\n  onPrevMonth = () => {\n    this.setState({\n      ...this.state,\n      displayDate: this.state.displayDate.minus({ months: 1 }),\n    });\n  }\n  onNextMonth = () => {\n    this.setState({\n      ...this.state,\n      displayDate: this.state.displayDate.plus({ months: 1 }),\n    });\n  }\n\n  onToggleConfigurationModal = () => {\n    this.setState({ ...this.state, showConfig: !this.state.showConfig });\n  }\n\n  onHideConfigurationModal = () => {\n    this.setState({ ...this.state, showConfig: false });\n  }\n\n  onUpdateConfiguration = (config: Configuration) => {\n    this.setState({ ...this.state, config });\n  }\n}","import { CalendarView as Calendar } from './CalendarView'\n\nexport default Calendar;","import React from 'react';\nimport 'bulma/css/bulma.min.css';\n\nimport Calendar from 'components/Calendar';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}